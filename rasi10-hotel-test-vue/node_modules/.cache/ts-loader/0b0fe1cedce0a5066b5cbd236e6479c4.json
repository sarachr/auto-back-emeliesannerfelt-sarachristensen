{"remainingRequest":"/home/teau/Desktop/cypress-demo-vue-project/rasi10-hotel-test-vue/node_modules/thread-loader/dist/cjs.js!/home/teau/Desktop/cypress-demo-vue-project/rasi10-hotel-test-vue/node_modules/babel-loader/lib/index.js!/home/teau/Desktop/cypress-demo-vue-project/rasi10-hotel-test-vue/node_modules/ts-loader/index.js??ref--13-3!/home/teau/Desktop/cypress-demo-vue-project/rasi10-hotel-test-vue/src/services/api.ts","dependencies":[{"path":"/home/teau/Desktop/cypress-demo-vue-project/rasi10-hotel-test-vue/src/services/api.ts","mtime":1602609006981},{"path":"/home/teau/Desktop/cypress-demo-vue-project/rasi10-hotel-test-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/teau/Desktop/cypress-demo-vue-project/rasi10-hotel-test-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/teau/Desktop/cypress-demo-vue-project/rasi10-hotel-test-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/teau/Desktop/cypress-demo-vue-project/rasi10-hotel-test-vue/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/teau/Desktop/cypress-demo-vue-project/rasi10-hotel-test-vue/src/services/api.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,MAAP,IAAiB,IAAjB,QAA6B,UAA7B;AACA,OAAO,GAAP,IAAc,OAAd,QAA6B,OAA7B;AACA,OAAO,KAAP,IAAgB,OAAhB,QAA+B,SAA/B;AAEA,OAAM,SAAU,aAAV,GAAuC;AAAA,MAAf,QAAe,uEAAJ,IAAI;AAC5C,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,IAA7B;;AACA,MAAI,QAAQ,IAAI,CAAC,QAAjB,EAA2B;AAC1B,IAAA,IAAI,CAAC,QAAD,CAAJ;AACA,WAAO,KAAP;AACA;;AACD,SAAO,QAAP;AACA;AAED,OAAM,SAAU,cAAV,GAAwB;AAC7B,MAAI,KAAK,CAAC,KAAN,CAAY,IAAhB,EAAsB;AACrB,IAAA,IAAI,CAAC,GAAD,CAAJ;AACA;AACD;AAED,gBAAsB,MAAtB;AAAA;AAAA;;;oEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEC,GAAG,CAAC,IAAJ,WAAY,OAAZ,kBAAkC,KAAK,CAAC,KAAN,CAAY,IAA9C,CAFD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAML,YAAA,WAAW,CAAC,KAAD,CAAX;AANK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsB,KAAtB;AAAA;AAAA;;;mEAAO,kBAAqB,QAArB,EAAuC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyD,YAAA,QAAzD,8DAA4E,GAA5E;AAAA;AAAA;AAAA,mBAEc,GAAG,CAAC,IAAJ,WAAY,OAAZ,iBAAiC;AACnD,cAAA,QAAQ,EAAR,QADmD;AAEnD,cAAA,QAAQ,EAAR;AAFmD,aAAjC,CAFd;;AAAA;AAEC,YAAA,IAFD;AAML,YAAA,KAAK,CAAC,MAAN,CAAa,OAAO,CAAC,QAArB,EAA+B,IAA/B;AACA,YAAA,QAAQ,GAAG,QAAQ,IAAI,QAAQ,CAAC,UAAT,CAAoB,QAApB,CAAZ,GAA4C,GAA5C,GAAkD,QAA7D;AACA,YAAA,IAAI,CAAC,QAAQ,IAAI,GAAb,CAAJ;AARK;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcP,SAAS,WAAT,GAAoB;AACnB,SAAO;AACN,mBAAe,IAAI,CAAC,SAAL,CAAe,KAAK,CAAC,KAAN,CAAY,IAA3B;AADT,GAAP;AAGA;;AAED,SAAS,WAAT,GAAsC;AAAA,MAAjB,UAAiB,uEAAJ,IAAI;AACrC,EAAA,KAAK,CAAC,MAAN,CAAa,OAAO,CAAC,WAArB;AACA,MAAM,QAAQ,GAAG,UAAU,uBAAgB,MAAM,CAAC,YAAP,CAAoB,IAApC,IAA6C,EAAxE;AACA,EAAA,IAAI,iBAAU,QAAV,EAAJ;AACA;;AAED,SAAS,QAAT,GAAiB;AAChB,EAAA,IAAI,QAAJ;AACA;;AAED,gBAAsB,MAAtB;AAAA;AAAA;;;oEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEC,OAAO,CAAC,GAAR,CAAY,CAAE,QAAQ,EAAV,EAAc,UAAU,EAAxB,EAA4B,QAAQ,EAApC,EAAwC,eAAe,EAAvD,CAAZ,CAFD;;AAAA;AAAA,8CAGE,IAHF;;AAAA;AAAA;AAAA;AAKL,YAAA,WAAW;AALN,8CAME,KANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsB,QAAtB;AAAA;AAAA;;;sEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEe,GAAG,CAAC,GAAJ,WAAW,OAAX,iBAAgC,WAAW,EAA3C,CAFf;;AAAA;AAEC,YAAA,KAFD;AAGL,YAAA,KAAK,CAAC,MAAN,CAAa,OAAO,CAAC,SAArB,EAAgC,KAAhC;AAHK,8CAIE,KAJF;;AAAA;AAAA;AAAA;AAAA,8CAME,WAAW,EANb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsB,UAAtB;AAAA;AAAA;;;wEAAO,kBAA0B,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,IAAJ,WAAY,OAAZ,oBAAoC,IAApC,EAA0C,WAAW,EAArD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,OAAtB;AAAA;AAAA;;;qEAAO,kBAAuB,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,GAAJ,WAAW,OAAX,uBAA+B,EAA/B,GAAqC,WAAW,EAAhD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8CAIE,QAAQ,EAJV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,QAAtB;AAAA;AAAA;;;sEAAO,kBAAwB,EAAxB,EAA4B,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,GAAJ,WAAW,OAAX,uBAA+B,EAA/B,GAAqC,IAArC,EAA2C,WAAW,EAAtD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,UAAtB;AAAA;AAAA;;;wEAAO,kBAA0B,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,MAAJ,WAAc,OAAd,uBAAkC,EAAlC,GAAwC,WAAW,EAAnD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,UAAtB;AAAA;AAAA;;;wEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEiB,GAAG,CAAC,GAAJ,WAAW,OAAX,mBAAkC,WAAW,EAA7C,CAFjB;;AAAA;AAEC,YAAA,OAFD;AAGL,YAAA,KAAK,CAAC,MAAN,CAAa,OAAO,CAAC,WAArB,EAAkC,OAAlC;AAHK,8CAIE,OAJF;;AAAA;AAAA;AAAA;AAAA,8CAME,WAAW,EANb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsB,YAAtB;AAAA;AAAA;;;0EAAO,mBAA4B,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,IAAJ,WAAY,OAAZ,sBAAsC,MAAtC,EAA8C,WAAW,EAAzD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,SAAtB;AAAA;AAAA;;;uEAAO,mBAAyB,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,GAAJ,WAAW,OAAX,yBAAiC,EAAjC,GAAuC,WAAW,EAAlD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,QAAQ,EAJV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,UAAtB;AAAA;AAAA;;;wEAAO,mBAA0B,EAA1B,EAA8B,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,GAAJ,WAAW,OAAX,yBAAiC,EAAjC,GAAuC,MAAvC,EAA+C,WAAW,EAA1D,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,YAAtB;AAAA;AAAA;;;0EAAO,mBAA4B,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,MAAJ,WAAc,OAAd,yBAAoC,EAApC,GAA0C,WAAW,EAArD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,QAAtB;AAAA;AAAA;;;sEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEe,GAAG,CAAC,GAAJ,WAAW,OAAX,iBAAgC,WAAW,EAA3C,CAFf;;AAAA;AAEC,YAAA,KAFD;AAGL,YAAA,KAAK,CAAC,MAAN,CAAa,OAAO,CAAC,SAArB,EAAgC,KAAhC;AAHK,+CAIE,KAJF;;AAAA;AAAA;AAAA;AAAA,+CAME,WAAW,EANb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsB,UAAtB;AAAA;AAAA;;;wEAAO,mBAA0B,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,IAAJ,WAAY,OAAZ,oBAAoC,IAApC,EAA0C,WAAW,EAArD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,OAAtB;AAAA;AAAA;;;qEAAO,mBAAuB,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,GAAJ,WAAW,OAAX,uBAA+B,EAA/B,GAAqC,WAAW,EAAhD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,QAAQ,EAJV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,QAAtB;AAAA;AAAA;;;sEAAO,mBAAwB,EAAxB,EAA4B,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,GAAJ,WAAW,OAAX,uBAA+B,EAA/B,GAAqC,IAArC,EAA2C,WAAW,EAAtD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,UAAtB;AAAA;AAAA;;;wEAAO,mBAA0B,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,MAAJ,WAAc,OAAd,uBAAkC,EAAlC,GAAwC,WAAW,EAAnD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,eAAtB;AAAA;AAAA;;;6EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEsB,GAAG,CAAC,GAAJ,WAAW,OAAX,wBAAuC,WAAW,EAAlD,CAFtB;;AAAA;AAEC,YAAA,YAFD;AAGL,YAAA,KAAK,CAAC,MAAN,CAAa,OAAO,CAAC,gBAArB,EAAuC,YAAvC;AAHK,+CAIE,YAJF;;AAAA;AAAA;AAAA;AAAA,+CAME,WAAW,EANb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsB,iBAAtB;AAAA;AAAA;;;+EAAO,mBAAiC,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,IAAJ,WAAY,OAAZ,2BAA2C,WAA3C,EAAwD,WAAW,EAAnE,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,cAAtB;AAAA;AAAA;;;4EAAO,mBAA8B,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,GAAJ,WAAW,OAAX,8BAAsC,EAAtC,GAA4C,WAAW,EAAvD,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,QAAQ,EAJV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,eAAtB;AAAA;AAAA;;;6EAAO,mBAA+B,EAA/B,EAAmC,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,GAAJ,WAAW,OAAX,8BAAsC,EAAtC,GAA4C,WAA5C,EAAyD,WAAW,EAApE,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsB,iBAAtB;AAAA;AAAA;;;+EAAO,mBAAiC,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQ,GAAG,CAAC,MAAJ,WAAc,OAAd,8BAAyC,EAAzC,GAA+C,WAAW,EAA1D,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAIE,WAAW,EAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import router, { push } from '@/router'\nimport xhr, { baseUrl } from './xhr'\nimport Store, { ACTIONS } from '@/store'\n\nexport function checkLoggedIn(redirect = true) {\n\tconst loggedIn = Store.state.user\n\tif (redirect && !loggedIn) {\n\t\tpush('/login')\n\t\treturn false\n\t}\n\treturn loggedIn\n}\n\nexport function checkLoggedOut() {\n\tif (Store.state.user) {\n\t\tpush('/')\n\t}\n}\n\nexport async function logout() {\n\ttry {\n\t\tawait xhr.post(`${baseUrl}/api/logout`, Store.state.user)\n\t} catch (err) {\n\t\t// Just logout anyway\n\t} finally {\n\t\tforceLogout(false)\n\t}\n}\n\nexport async function login(username: string, password: string, redirect: string = '/') {\n\ttry {\n\t\tconst user = await xhr.post(`${baseUrl}/api/login`, {\n\t\t\tusername,\n\t\t\tpassword\n\t\t})\n\t\tStore.commit(ACTIONS.SET_USER, user)\n\t\tredirect = redirect && redirect.startsWith('/login') ? '/' : redirect\n\t\tpush(redirect || '/')\n\t} catch (err) {\n\t\tthrow err\n\t}\n}\n\nfunction authHeaders() {\n\treturn {\n\t\t'X-User-Auth': JSON.stringify(Store.state.user)\n\t}\n}\n\nfunction forceLogout(doRedirect = true) {\n\tStore.commit(ACTIONS.RESET_STATE)\n\tconst redirect = doRedirect ? `?redirect=${router.currentRoute.path}` : ''\n\tpush(`/login${redirect}`)\n}\n\nfunction force404() {\n\tpush(`/404`)\n}\n\nexport async function getAll() {\n\ttry {\n\t\tawait Promise.all([ getRooms(), getClients(), getBills(), getReservations() ])\n\t\treturn true\n\t} catch (err) {\n\t\tforceLogout()\n\t\treturn false\n\t}\n}\n\nexport async function getRooms() {\n\ttry {\n\t\tconst rooms = await xhr.get(`${baseUrl}/api/rooms`, authHeaders())\n\t\tStore.commit(ACTIONS.SET_ROOMS, rooms)\n\t\treturn rooms\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function createRoom(room) {\n\ttry {\n\t\treturn await xhr.post(`${baseUrl}/api/room/new`, room, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function getRoom(id) {\n\ttry {\n\t\treturn await xhr.get(`${baseUrl}/api/room/${id}`, authHeaders())\n\t} catch (err) {\n\t\treturn force404()\n\t}\n}\n\nexport async function editRoom(id, room) {\n\ttry {\n\t\treturn await xhr.put(`${baseUrl}/api/room/${id}`, room, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function deleteRoom(id) {\n\ttry {\n\t\treturn await xhr.delete(`${baseUrl}/api/room/${id}`, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function getClients() {\n\ttry {\n\t\tconst clients = await xhr.get(`${baseUrl}/api/clients`, authHeaders())\n\t\tStore.commit(ACTIONS.SET_CLIENTS, clients)\n\t\treturn clients\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function createClient(client) {\n\ttry {\n\t\treturn await xhr.post(`${baseUrl}/api/client/new`, client, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function getClient(id) {\n\ttry {\n\t\treturn await xhr.get(`${baseUrl}/api/client/${id}`, authHeaders())\n\t} catch (err) {\n\t\treturn force404()\n\t}\n}\n\nexport async function editClient(id, client) {\n\ttry {\n\t\treturn await xhr.put(`${baseUrl}/api/client/${id}`, client, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function deleteClient(id) {\n\ttry {\n\t\treturn await xhr.delete(`${baseUrl}/api/client/${id}`, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function getBills() {\n\ttry {\n\t\tconst bills = await xhr.get(`${baseUrl}/api/bills`, authHeaders())\n\t\tStore.commit(ACTIONS.SET_BILLS, bills)\n\t\treturn bills\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function createBill(bill) {\n\ttry {\n\t\treturn await xhr.post(`${baseUrl}/api/bill/new`, bill, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function getBill(id) {\n\ttry {\n\t\treturn await xhr.get(`${baseUrl}/api/bill/${id}`, authHeaders())\n\t} catch (err) {\n\t\treturn force404()\n\t}\n}\n\nexport async function editBill(id, bill) {\n\ttry {\n\t\treturn await xhr.put(`${baseUrl}/api/bill/${id}`, bill, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function deleteBill(id) {\n\ttry {\n\t\treturn await xhr.delete(`${baseUrl}/api/bill/${id}`, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function getReservations() {\n\ttry {\n\t\tconst reservations = await xhr.get(`${baseUrl}/api/reservations`, authHeaders())\n\t\tStore.commit(ACTIONS.SET_RESERVATIONS, reservations)\n\t\treturn reservations\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function createReservation(reservation) {\n\ttry {\n\t\treturn await xhr.post(`${baseUrl}/api/reservation/new`, reservation, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function getReservation(id) {\n\ttry {\n\t\treturn await xhr.get(`${baseUrl}/api/reservation/${id}`, authHeaders())\n\t} catch (err) {\n\t\treturn force404()\n\t}\n}\n\nexport async function editReservation(id, reservation) {\n\ttry {\n\t\treturn await xhr.put(`${baseUrl}/api/reservation/${id}`, reservation, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n\nexport async function deleteReservation(id) {\n\ttry {\n\t\treturn await xhr.delete(`${baseUrl}/api/reservation/${id}`, authHeaders())\n\t} catch (err) {\n\t\treturn forceLogout()\n\t}\n}\n"],"sourceRoot":""}]}